<%+cbi/valueheader%>
<script type="text/javascript" src="<%=resource%>/twin-bcrypt.min.js" defer onerror="handleBcryptLoadError()"></script>
<script type="text/javascript">//<![CDATA[
	var bcryptloaded = false; // Track loading state
	var bcryptLoadError = false;

	function handleBcryptLoadError() {
		console.error("Failed to load twin-bcrypt.min.js");
		bcryptLoadError = true;
		var btn = document.getElementById('cbid.AdGuardHome.AdGuardHome.applychpass');
		if (btn) {
			btn.value = '<%:Error loading crypto library%>';
			btn.disabled = true;
		}
	}

	// Check if loaded after a short delay, as 'defer' might not guarantee immediate availability
	window.addEventListener('load', function() {
		if (typeof TwinBcrypt !== 'undefined') {
			bcryptloaded = true;
		} else if (!bcryptLoadError) {
			// If not loaded and no error triggered, possibly blocked or delayed
			setTimeout(function() {
				if (typeof TwinBcrypt === 'undefined' && !bcryptLoadError) {
					handleBcryptLoadError(); // Mark as error if still not loaded
				} else {
					bcryptloaded = true;
				}
			}, 1000); // Wait 1 second
		}
	});


	function chpass(btn) {
		if (bcryptLoadError) {
			btn.value = '<%:Crypto library failed to load%>';
			btn.disabled = true;
			return false;
		}

		if (!bcryptloaded) {
			btn.disabled = true;
			btn.value = '<%:loading...%>';
			// Wait a bit longer for the script to potentially load
			setTimeout(function() {
				if (typeof TwinBcrypt !== 'undefined') {
					bcryptloaded = true;
					btn.value = '<%:Culculate%>';
					btn.disabled = false;
				} else {
					handleBcryptLoadError(); // If still not loaded, assume error
				}
			}, 500);
			return false;
		}

		var pwField = document.getElementById('cbid.AdGuardHome.AdGuardHome.hashpass');
		if (pwField && pwField.value !== "") {
			try {
				// Disable button during hashing
				btn.disabled = true;
				btn.value = '<%:Culculate...%>';

				// Hashing can be slow, maybe use a small timeout to allow UI update
				setTimeout(function() {
					var hash = TwinBcrypt.hashSync(pwField.value); // Use the loaded library
					pwField.value = hash;
					btn.value = '<%:Please save/apply%>';
					// Keep button disabled until save/apply? Or re-enable? Re-enable for now.
					// btn.disabled = false;
				}, 10);

			} catch (e) {
				console.error("Hashing error:", e);
				btn.value = '<%:Hashing error!%>';
				btn.disabled = false; // Re-enable on error
			}
		} else {
			btn.value = '<%:Password is empty%>';
			btn.disabled = false;
		}
		return false; // Prevent default button action
	}
//]]>
</script>
<%-- Input field generated by LuCI --%>
<input data-update="change"<%=
	attr("id", cbid) ..
	attr("name", cbid) ..
	attr("type", self.password and "password" or "text") ..
	attr("class", self.password and "cbi-input-password" or "cbi-input-text") ..
	attr("value", self:cfgvalue(section) or self.default) ..
	ifattr(self.size, "size") ..
	ifattr(self.placeholder, "placeholder") ..
	ifattr(self.readonly, "readonly") ..
	ifattr(self.maxlength, "maxlength") ..
	ifattr(self.datatype, "data-type", self.datatype) ..
	ifattr(self.datatype, "data-optional", self.optional or self.rmempty) ..
	ifattr(self.combobox_manual, "data-manual", self.combobox_manual) ..
	ifattr(#self.keylist > 0, "data-choices", { self.keylist, self.vallist })
%> />
<% if self.password then %><img src="<%=resource%>/cbi/reload.gif" style="vertical-align:middle" title="<%:Reveal/hide password%>" onclick="var e = document.getElementById('<%=cbid%>'); e.type = (e.type=='password') ? 'text' : 'password';" /><% end %>
<input type="button" class="cbi-button cbi-button-apply" id="cbid.AdGuardHome.AdGuardHome.applychpass" value="<%:Culculate Hash%>" onclick="return chpass(this)" />
<%+cbi/valuefooter%>